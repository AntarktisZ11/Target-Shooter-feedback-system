#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    May 19, 2021 10:15:54 PM CEST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
    import tkinter.font as Tkfont

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import sender_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    sender_support.set_Tk_var()
    top = Toplevel1 (root)
    sender_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    sender_support.set_Tk_var()
    top = Toplevel1 (w)
    sender_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        default_font = Tkfont.nametofont("TkDefaultFont")
        default_font.configure(size=11)

        root.option_add("*Font", default_font)
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("800x400+300+146")
        top.minsize(120, 1)
        top.maxsize(1920, 1080)
        top.resizable(0,  0)
        top.title("Träffmarkerare")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        if sys.platform == "linux":
            top.attributes("-zoomed", True)

        self.Message1 = tk.Message(top)
        self.Message1.place(x=30, y=20, height=23, width=50)
        self.Message1.configure(background="#d9d9d9")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(takefocus="")
        self.Message1.configure(text='''Namn:''')
        self.Message1.configure(width=60)

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(x=250, y=0, height=395, width=515)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Image = tk.Label(self.Frame1)
        self.Image.place(x=10, y=10, height=375, width=495)
        self.Image.configure(activebackground="#f9f9f9")
        self.Image.configure(activeforeground="black")
        self.Image.configure(background="#d9d9d9")
        self.Image.configure(disabledforeground="#a3a3a3")
        self.Image.configure(foreground="#000000")
        self.Image.configure(highlightbackground="#d9d9d9")
        self.Image.configure(highlightcolor="black")
        self.Image.configure(text='''Bild''')

        self.Entry_Point = tk.Entry(top)
        self.Entry_Point.place(x=40, y=170, height=20, width=64)
        self.Entry_Point.configure(background="white")
        self.Entry_Point.configure(disabledforeground="#a3a3a3")
        # self.Entry_Point.configure(font="TkFixedFont")
        self.Entry_Point.configure(foreground="#000000")
        self.Entry_Point.configure(highlightbackground="#d9d9d9")
        self.Entry_Point.configure(highlightcolor="black")
        self.Entry_Point.configure(insertbackground="black")
        self.Entry_Point.configure(justify='center')
        self.Entry_Point.configure(selectbackground="blue")
        self.Entry_Point.configure(selectforeground="white")
        self.Entry_Point.bind('<Key-Return>',sender_support.point_entry)

        self.Entry_Clock = tk.Entry(top)
        self.Entry_Clock.place(x=140, y=170, height=20, width=64)
        self.Entry_Clock.configure(background="white")
        self.Entry_Clock.configure(disabledforeground="#a3a3a3")
        # self.Entry_Clock.configure(font="TkFixedFont")
        self.Entry_Clock.configure(foreground="#000000")
        self.Entry_Clock.configure(highlightbackground="#d9d9d9")
        self.Entry_Clock.configure(highlightcolor="black")
        self.Entry_Clock.configure(insertbackground="black")
        self.Entry_Clock.configure(justify='center')
        self.Entry_Clock.configure(selectbackground="blue")
        self.Entry_Clock.configure(selectforeground="white")
        self.Entry_Clock.bind('<Key-Return>',sender_support.clock_entry)

        self.Message2 = tk.Message(top)
        self.Message2.place(x=50, y=140, height=23, width=48)
        self.Message2.configure(background="#d9d9d9")
        self.Message2.configure(foreground="#000000")
        self.Message2.configure(highlightbackground="#d9d9d9")
        self.Message2.configure(highlightcolor="black")
        self.Message2.configure(text='''Poäng''')
        self.Message2.configure(width=60)

        self.Message3 = tk.Message(top)
        self.Message3.place(x=150, y=140, height=23, width=49)
        self.Message3.configure(background="#d9d9d9")
        self.Message3.configure(foreground="#000000")
        self.Message3.configure(highlightbackground="#d9d9d9")
        self.Message3.configure(highlightcolor="black")
        self.Message3.configure(text='''Klocka''')
        self.Message3.configure(width=60)

        self.Radiobutton1 = tk.Radiobutton(top)
        self.Radiobutton1.place(x=40, y=60, height=25, width=53)
        self.Radiobutton1.configure(activebackground="#ececec")
        self.Radiobutton1.configure(activeforeground="#000000")
        self.Radiobutton1.configure(background="#d9d9d9")
        self.Radiobutton1.configure(command=sender_support.allow_entry)
        self.Radiobutton1.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1.configure(foreground="#000000")
        self.Radiobutton1.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1.configure(highlightcolor="black")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(takefocus="0")
        self.Radiobutton1.configure(text='''Stilla''')
        self.Radiobutton1.configure(value=1)
        self.Radiobutton1.configure(variable=sender_support.selectedButton)
        self.tooltip_font = "TkDefaultFont"
        self.Radiobutton1_tooltip = \
        ToolTip(self.Radiobutton1, self.tooltip_font, '''Stillastående''')

        self.Radiobutton2 = tk.Radiobutton(top)
        self.Radiobutton2.place(x=40, y=90, height=25, width=74)
        self.Radiobutton2.configure(activebackground="#ececec")
        self.Radiobutton2.configure(activeforeground="#000000")
        self.Radiobutton2.configure(background="#d9d9d9")
        self.Radiobutton2.configure(command=sender_support.allow_entry)
        self.Radiobutton2.configure(disabledforeground="#a3a3a3")
        self.Radiobutton2.configure(foreground="#000000")
        self.Radiobutton2.configure(highlightbackground="#d9d9d9")
        self.Radiobutton2.configure(highlightcolor="black")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(takefocus="0")
        self.Radiobutton2.configure(text='''Jaktskott''')
        self.Radiobutton2.configure(value=2)
        self.Radiobutton2.configure(variable=sender_support.selectedButton)

        self.Radiobutton3 = tk.Radiobutton(top)
        self.Radiobutton3.place(x=140, y=60, height=25, width=74)
        self.Radiobutton3.configure(activebackground="#ececec")
        self.Radiobutton3.configure(activeforeground="#000000")
        self.Radiobutton3.configure(background="#d9d9d9")
        self.Radiobutton3.configure(command=sender_support.allow_entry)
        self.Radiobutton3.configure(disabledforeground="#a3a3a3")
        self.Radiobutton3.configure(foreground="#000000")
        self.Radiobutton3.configure(highlightbackground="#d9d9d9")
        self.Radiobutton3.configure(highlightcolor="black")
        self.Radiobutton3.configure(justify='left')
        self.Radiobutton3.configure(takefocus="0")
        self.Radiobutton3.configure(text='''Löpande''')
        self.Radiobutton3.configure(value=3)
        self.Radiobutton3.configure(variable=sender_support.selectedButton)

        self.Radiobutton4 = tk.Radiobutton(top)
        self.Radiobutton4.place(x=140, y=90, height=25, width=66)
        self.Radiobutton4.configure(activebackground="#ececec")
        self.Radiobutton4.configure(activeforeground="#000000")
        self.Radiobutton4.configure(background="#d9d9d9")
        self.Radiobutton4.configure(command=sender_support.allow_entry)
        self.Radiobutton4.configure(disabledforeground="#a3a3a3")
        self.Radiobutton4.configure(foreground="#000000")
        self.Radiobutton4.configure(highlightbackground="#d9d9d9")
        self.Radiobutton4.configure(highlightcolor="black")
        self.Radiobutton4.configure(justify='left')
        self.Radiobutton4.configure(takefocus="0")
        self.Radiobutton4.configure(text='''Dubble''')
        self.Radiobutton4.configure(value=4)
        self.Radiobutton4.configure(variable=sender_support.selectedButton)

        self.TCombobox1 = ttk.Combobox(top)
        self.TCombobox1.place(x=80, y=20, height=28, width=143)
        # self.value_list = ['Per Persson','Johan Johansson','Sven Svensson',]
        # self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(state='readonly')
        self.TCombobox1.configure(takefocus="0")
        self.TCombobox1.bind('<FocusIn>',sender_support._from_combobox)

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.place(x=30, y=230, height=102, width=184)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        # self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="blue")
        self.Listbox1.configure(selectforeground="white")
        self.Listbox1.configure(takefocus="0")
        self.Listbox1.bind('<Key-Delete>',sender_support.delete_item)
        self.Listbox1.bind('<Key-BackSpace>',sender_support.delete_item)

        self.Label_PointError = tk.Label(top)
        self.Label_PointError.place(x=40, y=190, height=21, width=64)
        self.Label_PointError.configure(activebackground="#f9f9f9")
        self.Label_PointError.configure(activeforeground="black")
        self.Label_PointError.configure(background="#d9d9d9")
        self.Label_PointError.configure(disabledforeground="#a3a3a3")
        self.Label_PointError.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label_PointError.configure(foreground="#ff0000")
        self.Label_PointError.configure(highlightbackground="#d9d9d9")
        self.Label_PointError.configure(highlightcolor="black")
        self.Label_PointError.configure(text='''Invalid''')

        self.Label_ClockError = tk.Label(top)
        self.Label_ClockError.place(x=140, y=190, height=21, width=64)
        self.Label_ClockError.configure(activebackground="#f9f9f9")
        self.Label_ClockError.configure(activeforeground="black")
        self.Label_ClockError.configure(background="#d9d9d9")
        self.Label_ClockError.configure(disabledforeground="#a3a3a3")
        self.Label_ClockError.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label_ClockError.configure(foreground="#ff0000")
        self.Label_ClockError.configure(highlightbackground="#d9d9d9")
        self.Label_ClockError.configure(highlightcolor="black")
        self.Label_ClockError.configure(text='''Invalid''')

        self.Button_Undo = tk.Button(top)
        self.Button_Undo.place(x=130, y=350, height=24, width=73)
        self.Button_Undo.configure(activebackground="#ececec")
        self.Button_Undo.configure(activeforeground="#000000")
        self.Button_Undo.configure(background="#d9d9d9")
        self.Button_Undo.configure(command= lambda: sender_support.delete_item("doesNothing", True))
        self.Button_Undo.configure(disabledforeground="#a3a3a3")
        self.Button_Undo.configure(foreground="#000000")
        self.Button_Undo.configure(highlightbackground="#d9d9d9")
        self.Button_Undo.configure(highlightcolor="black")
        self.Button_Undo.configure(pady="0")
        self.Button_Undo.configure(text='''Ångra''')

        self.Exit = tk.Button(top)
        self.Exit.place(x=40, y=350, height=24, width=30)
        self.Exit.configure(activebackground="#ececec")
        self.Exit.configure(activeforeground="#000000")
        self.Exit.configure(background="#d9d9d9")
        self.Exit.configure(command=sender_support.destroy_window)
        self.Exit.configure(disabledforeground="#a3a3a3")
        self.Exit.configure(foreground="#000000")
        self.Exit.configure(highlightbackground="#d9d9d9")
        self.Exit.configure(highlightcolor="black")
        self.Exit.configure(pady="0")
        self.Exit.configure(text='''Exit''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                label="Inställningar")
        self.sub_menu.add_checkbutton(
                variable=sender_support.free_mode_check,
                command=sender_support.free_mode,
                label="Fritt läge [Experimentell]")
        self.menubar.add_command(
                command=sender_support.open_print_window,
                label="Skriv ut")

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#ececec")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="#000000")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(foreground="#000000")
        Popupmenu1.post(event.x_root, event.y_root)

    @staticmethod
    def popup2(event, *args, **kwargs):
        Popupmenu2 = tk.Menu(root, tearoff=0)
        Popupmenu2.configure(activebackground="#ececec")
        Popupmenu2.configure(activeborderwidth="1")
        Popupmenu2.configure(activeforeground="#000000")
        Popupmenu2.configure(background="#d9d9d9")
        Popupmenu2.configure(borderwidth="1")
        Popupmenu2.configure(disabledforeground="#a3a3a3")
        Popupmenu2.configure(foreground="#000000")
        Popupmenu2.post(event.x_root, event.y_root)

    @staticmethod
    def popup3(event, *args, **kwargs):
        Popupmenu3 = tk.Menu(root, tearoff=0)
        Popupmenu3.configure(activebackground="#ececec")
        Popupmenu3.configure(activeborderwidth="1")
        Popupmenu3.configure(activeforeground="#000000")
        Popupmenu3.configure(background="#d9d9d9")
        Popupmenu3.configure(borderwidth="1")
        Popupmenu3.configure(disabledforeground="#a3a3a3")
        Popupmenu3.configure(foreground="#000000")
        Popupmenu3.post(event.x_root, event.y_root)

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





