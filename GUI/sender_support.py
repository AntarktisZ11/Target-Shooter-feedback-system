#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    May 13, 2021 04:27:49 PM CEST  platform: Windows NT
#    May 13, 2021 06:27:19 PM CEST  platform: Windows NT
#    May 14, 2021 06:15:22 PM CEST  platform: Windows NT
#    May 19, 2021 05:14:50 PM CEST  platform: Windows NT
#    May 19, 2021 05:30:26 PM CEST  platform: Windows NT
#    May 19, 2021 05:56:42 PM CEST  platform: Windows NT

import sys
import os.path
import figureGen
import pandas as pd
import numpy as np
import shutil

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global free_mode_check
    free_mode_check = tk.BooleanVar()
    global selectedButton
    selectedButton = tk.IntVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    # --- Start of init edit ---
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]

    csvfolder = os.path.join(prog_location, "csv")
    try:
        shutil.rmtree(csvfolder)
    except OSError as e:
        print("Error: %s - %s." % (e.filename, e.strerror))
    os.mkdir(csvfolder)

    global target
    target = figureGen.Target([1,2,3, 4, 5, 51])
    # target = figureGen.Target([])

    # Create default image
    update_img(None,None, True)

    global log
    log = pd.DataFrame(columns=['Name', 'Style', 'Point', 'Clock'])

    global radios
    radios = {'St': w.Radiobutton1,
             'J': w.Radiobutton2,
             'L': w.Radiobutton3,
             'D': w.Radiobutton4}

    global Label_ClockError_location
    Label_ClockError_location = w.Label_ClockError.place_info()
    w.Label_ClockError.place_forget()

    global Label_PointError_location
    Label_PointError_location = w.Label_PointError.place_info()
    w.Label_PointError.place_forget()

    w.Entry_Clock.configure(state='disabled')
    w.Entry_Point.configure(state='disabled')

    for column in ['St', 'J', 'L', 'D']:
        radios[column].configure(state='disabled')

    # w.Radiobutton1.configure(state='disabled')
    # w.Radiobutton2.configure(state='disabled')
    # w.Radiobutton3.configure(state='disabled')
    # w.Radiobutton4.configure(state='disabled')
    
    # --- End of init edit ---

def delete_item(_):
    index = w.Listbox1.curselection()
    global log
    try:
        entry = log.iloc[index[0], :]
    except IndexError:
        print("No item selected to delete in listbox")
        return
    if entry['Name'] in [None, '']:
        pass
    else:
        filename = os.path.join(prog_location, "csv", str(entry['Name'])+".csv")
        df_from_csv = pd.read_csv(filename, squeeze=True, dtype='str')
        # row = 3 - df_from_csv[entry['Style']].isnull().sum()
        row = df_from_csv[df_from_csv[entry['Style']] == entry['Point']].last_valid_index()
        df_from_csv.at[row, entry['Style']] = np.nan
        df_from_csv.to_csv(filename, index=False)

    log.drop([index[0]], inplace=True)
    log.reset_index(inplace=True, drop=True)
    print("")
    print(log.values)
    w.Listbox1.delete(index)
    update_radiobuttons()

def add_item(point, clock=None):
    name = w.TCombobox1.get()

    if name == '':
        column = None
        if clock == None:
            string = str(point)
        else:
            string = "{} kl {}".format(str(point), str(clock))
    else:
        filename = os.path.join(prog_location, "csv", str(name)+".csv")
        df_from_csv = pd.read_csv(filename, squeeze=True, dtype='str')

        column = ['St', 'J', 'L', 'D'][selectedButton.get()-1]
        row = pd.isnull(df_from_csv[column]).to_numpy().nonzero()[0][0]
        # temp = 
        # temp2 = df_from_csv[df_from_csv[column].fillna(value=0) == '0']
        # row = temp2.first_valid_index()
        # if row == None:
        #     row = 0
        print(row)

        df_from_csv.at[row, column] = point
        df_from_csv.to_csv(filename, index=False)

        if row + 1 == 4:
            w.Entry_Point.bind('<Key-Return>', _dummy) # Fixes anoyying bug circumventing disabled entry
            w.Entry_Point.delete(0, 'end') # Removes 
            update_radiobuttons()
            
        if clock == None:
            string = "{}: [{}] {}".format(name.split()[0], column, str(point))
        else:
            string = "{}: [{}] {} kl {}".format(name.split()[0], column, str(point), str(clock))

    global log
    log.loc[-1] = [name, column, point, clock]
    log.index += 1
    log = log.sort_index()
    print("")
    print(log.values)

    w.Listbox1.insert(0, string)
    w.Listbox1.see(0)

def format_csv(name):
    filename = os.path.join(prog_location, "csv", str(name)+".csv")
    df = pd.read_csv(filename, squeeze=True)
    df = df.fillna('-')
    for key in ['St', 'J', 'L', 'D']:
        df[key] = df[key].astype(str)
        df[key] = df[key].str.split('.')
        df[key] = df[key].str[0]
    df.to_csv(filename, index=False)

def _from_combobox(_):
    w.Message1.focus()
    update_radiobuttons()

def update_radiobuttons():
    name = w.TCombobox1.get()
    columns=['St', 'J', 'L', 'D']

    for column in columns:
        radios[column].configure(state='disabled')
    # w.Radiobutton1.configure(state='disabled')
    # w.Radiobutton2.configure(state='disabled')
    # w.Radiobutton3.configure(state='disabled')
    # w.Radiobutton4.configure(state='disabled')
    selectedButton.set(0)

    if name != '':
        filename = os.path.join(prog_location, "csv", str(name)+".csv")
        
        if not os.path.exists(filename):
            with open(filename, 'w'): pass
            df = pd.DataFrame(np.nan, index=[0, 1, 2, 3], columns=columns)
            df.to_csv(filename, index=False)
            for column in columns:
                radios[column].configure(state='normal')
            # w.Radiobutton1.configure(state='normal')
            # w.Radiobutton2.configure(state='normal')
            # w.Radiobutton3.configure(state='normal')
            # w.Radiobutton4.configure(state='normal')
            # w.Entry_Point.configure(state='normal')
        else:
            from_csv = pd.read_csv(filename, squeeze=True)
            # if from_csv.isnull().values.any():
            #     w.Entry_Point.configure(state='normal')
            # else:
            #     w.Entry_Point.configure(state='disabled')
            #     return

            for column in columns:
                if from_csv[column].isnull().values.any():
                    radios[column].configure(state='normal')
            # if from_csv['J'].isnull().values.any():
            #     w.Radiobutton2.configure(state='normal')
            # if from_csv['L'].isnull().values.any():
            #     w.Radiobutton3.configure(state='normal')
            # if from_csv['D'].isnull().values.any():
            #     w.Radiobutton4.configure(state='normal')
            
            if selectedButton.get() == 0:
                w.Entry_Point.configure(state='disabled')

def allow_entry():
    w.Entry_Point.configure(state='normal')
    w.Entry_Point.bind('<Key-Return>', point_entry)
    w.Entry_Point.focus()
    # if selectedButton.get() == -1:
    #     w.Entry_Point.configure(state='disabled')

def _dummy(_):
    pass

def clock_entry(_):
    w.Label_ClockError.place_forget()
    root.update()
    point = w.Entry_Point.get()
    clock = w.Entry_Clock.get()

    if point_entry(_, False) and clock in ['12', '11', '10', '9', '8', '7', '6', '5', '4', '3', '2','1']:
        add_item(point, clock)
        update_img(point, int(clock))
        w.Entry_Point.delete(0, 'end')
        w.Entry_Clock.delete(0, 'end')
        w.Entry_Point.focus()
        w.Entry_Clock.configure(state='disabled')
    else:
        w.Entry_Clock.delete(0, 'end')
        root.after(100) # Cause a delay for error label to flash for feedback
        w.Label_ClockError.place(x=Label_ClockError_location['x'], y=Label_ClockError_location['y'])

def point_entry(_, update=True):
    w.Label_PointError.place_forget()
    root.update()
    point = w.Entry_Point.get()

    # Convert elements to str to compare to "point"
    str_pointRange = []
    for item in target.pointRange: 
        str_pointRange.append(str(item))

    if point in str_pointRange[1:]: # All but center
        if update:
            update_img(point)
        w.Entry_Clock.configure(state='normal')
        w.Entry_Clock.focus()
    
    elif point == str_pointRange[0]: # Center/bullseye
        add_item(point)
        update_img(point)
        w.Entry_Point.delete(0, 'end')

    elif point in ["Miss", "x", "X"]:
        add_item(point)
        update_img(point)
        w.Entry_Point.delete(0, 'end')

    elif point in ["T", "t", "o", "O", 0, "0"]: # Hit on figure but ouside target area
        if update:
            update_img(point)
        w.Entry_Clock.configure(state='normal')
        w.Entry_Clock.focus()        
        
    else:
        w.Entry_Point.delete(0, 'end')
        root.after(100) # Cause a delay for error label to flash for feedback
        w.Label_PointError.place(x=Label_PointError_location['x'], y=Label_PointError_location['y'])
        w.Entry_Clock.configure(state='disabled')
        return False
    return True

def update_img(point=4, clock=None, defaultImg=False):
    if defaultImg:
        target.default()
    else:
        try:
            target.targetHit(int(point), clock)
        except:
            target.targetHit(point, clock)
    target.saveFigure()
    photo_location = os.path.join(prog_location,"./test.png")
    global _img0
    _img0 = tk.PhotoImage(file=photo_location)
    w.Label1.configure(image=_img0)

def open_print_window():
    print('sender_support.open_print_window')
    # print(free_mode_check.get())
    sys.stdout.flush()

def free_mode():
    print('sender_support.free_mode')
    sys.stdout.flush()
    if free_mode_check.get() is True:
        w.TCombobox1.set('')
        w.TCombobox1.configure(state='disabled')
        allow_entry()
    else:
        w.TCombobox1.configure(state='readonly')
    update_radiobuttons()


def destroy_window():
    try:
        format_csv(w.TCombobox1.get())
    except:
        pass
    
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import sender
    sender.vp_start_gui()





